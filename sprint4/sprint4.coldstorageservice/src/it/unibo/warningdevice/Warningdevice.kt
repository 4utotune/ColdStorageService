/* Generated by AN DISI Unibo */ 
package it.unibo.warningdevice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Warningdevice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outblue("$name | init")
						CoapObserverSupport(myself, "localhost","11802","ctx_coldstorage","transporttrolley")
						CoapObserverSupport(myself, "localhost","11802","ctx_coldstorage","alarmdevice")
						CommUtils.outblue("$name | LED IS OFF")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="doObserve",cond=whenDispatch("coapUpdate"))
				}	 
				state("doObserve") { //this:State
					action { //it:State
						discardMessages = false
						if( checkMsgContent( Term.createTerm("coapUpdate(RESOURCE,VALUE)"), Term.createTerm("coapUpdate(RES,ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var caller = payloadArg(0) 
											   var stato = payloadArg(1)  
								if(  (stato == "azione(HOME)")  
								 ){CommUtils.outblue("$name | HOME da $caller -> OFF")
								emit("ledoff", "ledoff(_)" ) 
								}
								else
								 {if(  (stato == "azione(STOPPED)")  
								  ){CommUtils.outblue("$name | STOPPED da $caller -> ON")
								 emit("ledon", "ledon(_)" ) 
								 }
								 else
								  {if(  (stato == "azione(MOVING)")  
								   ){CommUtils.outblue("$name | MOVING da $caller -> BLINK")
								  emit("ledblink", "ledblink(_)" ) 
								  }
								  }
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
