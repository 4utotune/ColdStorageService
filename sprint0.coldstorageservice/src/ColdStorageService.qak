System coldstorageservice_sprint0

// MESSAGGI
// serviceAccessGUI -> coldstorageservice
Request coldroomdatarequest: coldroomdatarequest(_)
Reply coldroomdata: coldroomdata(WEIGHT)

Request storerequest: 	storerequest(FW)
Reply storeaccepted:	storeaccepted(TICKET)
Reply storerejected: 	storerejected(_)

Request insertticket: insertticket(TICKET)
Reply ticketaccepted: ticketaccepted(_)
Reply ticketrejected: ticketrejected(_)

// transporttrolley -> coldstorageservice  
Dispatch chargetaken: chargetaken(_)

Request chargedeposited: chargedeposited(_)

// coldstorageservice -> transporttrolley
Reply more: more(_)
Reply gohome: gohome(_)

Dispatch gotoindoor: gotoindoor(_)

// TransportTrolley -> BasicRobot
Dispatch cmd:			cmd(_)
Request step:			step(_)

// sonar -> transporttrolley
Dispatch alarm: alarm(STATUS)

// transporttrolley -> led
Dispatch updateled: updateled(STATUS) 

// transporttrolley -> servicestatusgui
Dispatch updatetrolleystatus: updatetrolleystatus(STATE, POS)

// coldstorageservice -> servicestatusgui
Dispatch updatecoldstoragestatus: updatecoldstoragestatus(CURWEIGHT, REJREQUESTS)


// CONTEXTS
Context ctx_basicrobot 	ip [host="localhost" port=8020]
Context ctx_coldstorage	ip [host="localhost" port=11800]
//Context ctx_accessgui	ip [host="localhost" port=11801]
//Context ctx_statusgui 	ip [host="localhost" port=11802]
//Context ctx_raspberry 	ip [host="localhost" port=11803]

// ACTORS
ExternalQActor basicrobot context ctx_basicrobot

QActor serviceaccessgui context ctx_coldstorage { //ctx_accessgui {
	[#
		var currentWeight: Float	
	#]
	State init initial {
		println("[ServiceAccessGui] Init") color yellow
		[# currentWeight = 0.0f #]
	}
	Goto update
	
	State update {
		request coldstorageservice -m coldroomdatarequest: coldroomdatarequest(_)
		
	}
	Transition t0	whenReply coldroomdata -> handle_update_data
	
	State handle_update_data {
		onMsg(coldroomdata: coldroomdata(WEIGHT)) {
			[# 
				currentWeight = payloadArg(0).toFloat()	
			#]
			println("[ServiceAccessGui] Updating weight -> $currentWeight ") color yellow
		}
	}
	Goto idle
	
	State idle {
		println("[ServiceAccessGui] Idle...") color yellow
		delay 1000
		println("[ServiceAccessGui] Sending request") color yellow
		request coldstorageservice -m storerequest: storerequest(30)
	}
	Transition t1	whenReply 	storeaccepted 	-> handle_store_accepted
					whenReply 	storerejected 	-> handle_store_rejected
					whenMsg		chargetaken 	-> handle_charge_taken		

	
	State handle_store_accepted {
		onMsg(storeaccepted: storeaccepted(TICKET)) {
			println("[ServiceAccessGui] Store Accepted") color yellow
			delay 500
			println("[ServiceAccessGui] Sending ticket") color yellow
			[# val TIMESTAMP = payloadArg(0) #]
			request coldstorageservice -m insertticket: insertticket($TIMESTAMP)
			
			// TODO show ticket
		}
	}
	Transition t2 	whenReply 	ticketaccepted 	-> handle_ticket_accepted
					whenReply 	ticketrejected 	-> handle_ticket_rejected
	
	State handle_store_rejected {
		println("[ServiceAccessGui] Store Rejected") color yellow
		// TODO show error message
	}
	Goto idle
		
	State handle_ticket_accepted {
		println("[ServiceAccessGui] Ticket Accepted") color yellow
		// TODO show success message
	}
	Goto idle
	
	State handle_ticket_rejected {
		println("[ServiceAccessGui] Ticket Rejected") color yellow
		// TODO show error message
	}
	Goto idle
	
	State handle_charge_taken {
		println("[ServiceAccessGui] Charge Taken") color yellow
		// TODO show charge taken message
	}
	Goto update
}

QActor coldstorageservice context ctx_coldstorage {
	[#
		var MaxWeightcoldroom: Float = 100.0f
		var CurrentWeight: Float = 0.0f
		var ReservedWeight: Float = 0.0f
		var RejectedRequests: Int = 0
		var WaitingTicket: coldstorageservice.Ticket? = null
		var WorkingTicket: coldstorageservice.Ticket? = null
		var Tickets: MutableSet<coldstorageservice.Ticket> = mutableSetOf()
	#]
	State init initial {
		[# 
			CurrentWeight = 0.0f 
			ReservedWeight = 0.0f
			MaxWeightcoldroom = 100f
			RejectedRequests = 0
			WaitingTicket = null
			WorkingTicket = null
			Tickets = mutableSetOf()
		#]
		println("[ColdStorageService] Init") color green		
		forward servicestatusgui -m updatecoldstoragestatus: updatecoldstoragestatus(_) 
	}
	Goto idle
	
	State idle {
		println("[ColdStorageService] Idle...") color green
	}
	Transition t0 	whenRequest coldroomdatarequest -> handle_data
					whenRequest storerequest		-> handle_store
					whenRequest insertticket		-> handle_ticket
					whenRequest chargedeposited		-> handle_ticketloop
					whenMsg		chargetaken			-> handle_charge_taken
					
	State handle_data {
		onMsg(coldroomdatarequest: coldroomdatarequest(_)) {
			println("[ColdStorageService] Sending current weight update") color green
			replyTo coldroomdatarequest with coldroomdata: coldroomdata($CurrentWeight)
		}
	}
	Goto idle
	
	State handle_store {
		onMsg(storerequest: storerequest(FW)) {
			println("[ColdStorageService] Handling store") color green
			[# val FW = payloadArg(0).toFloat() #]
			if [# ((CurrentWeight + ReservedWeight + FW) > MaxWeightcoldroom) #] {
				[# RejectedRequests++ #]
				replyTo storerequest with storerejected: storerejected(_)
			} else {
				[#
					val TICKET = coldstorageservice.Ticket(FW)
				  	Tickets.add(TICKET)
				  	ReservedWeight += FW
				  	val Timestamp = TICKET.getTimestamp()
				#]
				replyTo storerequest with storeaccepted: storeaccepted($Timestamp)
			}
		}
	}
	Goto idle
	
	State handle_ticket {
		onMsg(insertticket: insertticket(TICKET)) {
			println("[ColdStorageService] Handling ticket") color green
			[# val TICKET = Tickets.find { it.getTimestamp() == payloadArg(0).toString() } #]
			if [# (TICKET != null && TICKET.isValid()) #]{
				[# 
					WaitingTicket = TICKET 				
				#]
				replyTo insertticket with ticketaccepted: ticketaccepted(_)
				forward transporttrolley -m gotoindoor: gotoindoor(_)
			} else {
				[# 
					if (TICKET != null) {
						Tickets.remove(TICKET) 
				   		ReservedWeight -= TICKET.getWeight()
				   	}
				#]
				replyTo insertticket with ticketrejected: ticketrejected(_)
			}
		}
	}
	Goto idle
	
	State handle_ticketloop {
		onMsg(chargedeposited: chargedeposited(_)) {
			println("[ColdStorageService] Deposit confirmation received") color green
			[#
				if (WorkingTicket!=null){
					CurrentWeight += WorkingTicket!!.getWeight()
					ReservedWeight -= WorkingTicket!!.getWeight()
				}	
				WorkingTicket = null
			#]
			if [# (WaitingTicket != null) #] {
				replyTo chargedeposited with more: more(_)
			} else {
				replyTo chargedeposited with gohome: gohome(_)
			}
		}
	}
	Goto idle
	
	State handle_charge_taken {
		println("[ColdStorageService] Forwarding charge taken") color green
		[# 
			WorkingTicket = WaitingTicket
			WaitingTicket = null
		#]
		forward serviceaccessgui -m chargetaken: chargetaken(_)
	}
	Goto idle
}

QActor transporttrolley context ctx_coldstorage {
	State init initial {
		println("[TransportTrolley] Init") color magenta
		//forward led -m updateled: updateled(_)
		forward servicestatusgui -m updatetrolleystatus: updatetrolleystatus(_) 
	}
	Goto idle
	
	State idle {
		println("[transporttrolley] Idle...") color magenta
	}
	Transition t0	whenMsg gotoindoor	-> handle_load_request
	
	State handle_load_request {
		onMsg(gotoindoor: gotoindoor(_)) {
			println("[transporttrolley] Going indoor") color magenta
			forward basicrobot -m cmd: cmd(_)
			request basicrobot -m step: step(_)
			// TODO
			// go to indoor
			// pick up
			println("[transporttrolley] Charge taken") color magenta
			forward coldstorageservice -m chargetaken: chargetaken(_)
			delay 500
			// TODO
			// go to coldroom
			println("[transporttrolley] Charge deposited") color magenta
			request coldstorageservice -m chargedeposited: chargedeposited(_)
		}
	}
	Transition t1	whenReply more -> handle_load_request
				 	whenReply gohome -> handle_gohome
				 	
	State handle_gohome {
		onMsg(gohome: gohome(_)) {
			println("[transporttrolley] Going home") color magenta
			// TODO 
			// go to home
		}
	}
	Goto idle
}


QActor sonar context ctx_coldstorage { //ctx_raspberry {
	State init initial {
		println("[Sonar] Init") color blue
	}
	Goto idle
	
	State idle {
		println("[Sonar] Idle...") color blue
		// TODO
	}
	Transition t0 whenMsg updateled -> alarm
		
	State alarm {
		forward transporttrolley -m alarm: alarm(_)
	}
	Goto idle
}


QActor led context ctx_coldstorage { //ctx_raspberry {
	State init initial {
		println("[Led] Init") color blue
	}
	Goto led_off
	
	State led_off {
		
	}
	Transition t0	whenMsg updateled	-> handle_update
	
	State led_on {
		
	}
	Transition t1	whenMsg updateled	-> handle_update
	
	State led_blink {
		
	}
	Transition t2	whenMsg updateled	-> handle_update
	
	State handle_update {
		onMsg(updateled: updateled(STATUS)) {
			// TODO
			// update led
			// transition		
		}
	}
}

QActor servicestatusgui context ctx_coldstorage { //ctx_statusgui {
	[# 
		var TrolleyState: String = "IDLE"
		var TrolleyPosition: String = "HOME"
		var CurrentWeight: Float = 0.0f
		var RejectedRequest: Int = 0
	#]
	State init initial {
		println("[ServiceStatusGui] Init") color red
		[# 
			TrolleyState = "IDLE"
			TrolleyPosition = "HOME"
			CurrentWeight = 0.0f
			RejectedRequest = 0
		#]	
	}
	Goto idle
	
	State idle {
		println("[ServiceStatusGui] Idle...") color red
	}
	Transition t0	whenMsg updatetrolleystatus 	-> handle_trolley_update
					whenMsg updatecoldstoragestatus -> handle_coldstorage_update
					
	State handle_trolley_update {
		println("[ServiceStatusGui] Updating trolley") color red
		
		// TODO update values
	}
	Goto idle
	
	State handle_coldstorage_update {
		println("[ServiceStatusGui] Updating coldroom") color red
		// TODO update values
	}
	Goto idle
}