/* Generated by AN DISI Unibo */ 
package it.unibo.statusgui_proxy

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Statusgui_proxy ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CoapObserverSupport(myself, "127.0.0.1","8020","ctx_basicrobot","basicrobot")
						CoapObserverSupport(myself, "localhost","11802","ctx_coldstorage","coldstorageservice")
						CoapObserverSupport(myself, "localhost","11802","ctx_coldstorage","transporttrolley")
						CoapObserverSupport(myself, "127.0.0.1","8020","ctx_basicrobot","robotpos")
						CommUtils.outred("$name | init")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="observing", cond=doswitch() )
				}	 
				state("observing") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t0",targetState="handle_update",cond=whenDispatch("coapUpdate"))
				}	 
				state("handle_update") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 try {  
						if( checkMsgContent( Term.createTerm("coapUpdate(RESOURCE,VALUE)"), Term.createTerm("coapUpdate(nasicrobot,VAL)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outred("$name | update from ${payloadArg(0)} -> ${payloadArg(1)}")
						}
						} catch (e: Exception) { 
									System.out.println("Errore")
								}  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="observing", cond=doswitch() )
				}	 
			}
		}
}
