System coldstorageservice_sprint0

// MESSAGGI
// serviceAccessGUI -> coldstorageservice
Request coldroomdatarequest: coldroomdatarequest(_)
Reply coldroomdata: coldroomdata(weight)

Request storerequest: 	storerequest(FW)
Reply storeaccepted:	storeaccepted(TICKET)
Reply storerejected:	storerejected(_)

Request insertticket: insertticket(TICKET)
Reply ticketaccepted: ticketaccepted(_)
Reply ticketrejected: ticketrejected(_)

// transporttrolley -> coldstorageservice  
Dispatch chargetaken: chargetaken(_)

Request chargedeposited: chargedeposited(_)

// coldstorageservice -> transporttrolley
Dispatch gotoindoor: gotoindoor(_)

Reply more: more(_)
Reply gohome: gohome(_)

// sonar -> transporttrolley
Dispatch alarm: alarm(STATUS)

// transporttrolley -> led
Dispatch updateled: updateled(ledStatus) 

// transporttrolley -> servicestatusgui
Dispatch trolleystatus: trolleystatus(trolleyState, trolleyPosition)

// coldstorageservice -> servicestatusgui
Dispatch coldstoragestatus: coldstoragestatus(currentWeight, rejectedRequest)


// CONTEXTS
Context ctxcoldstorage ip [host="localhost" port=8021]


// ACTORS
ExternalQActor basicrobot context ctxcoldstorage

QActor transporttrolley context ctxcoldstorage {
	State init initial {
		
	}
}

QActor servicestatusgui context ctxcoldstorage {
	State s0 initial {
		
	}
}

QActor serviceaccessgui context ctxcoldstorage {
	State s0 initial {
		
	}
}

QActor coldstorageservice context ctxcoldstorage {
	[#
		var CurrentWeight: Float
		var MaxWeightcoldroom: Float
		var ReservedWeight: Float
		var RejectedRequest: Int
		var CurrentTicket: String
		val Tickets: MutableSet<Ticket>
	#]
	State init initial {
		[# 
			CurrentWeight = 0.0f 
			ReservedWeight = 0.0f
			MaxWeightcoldroom = 100f
			RejectedRequests = 0
			Tickets = new MutableSet()
		#]
		println("[ColdStorageService] Initialized")
	}
	Goto idle
	
	State idle {
		println("[ColdStorageService] Idle...")
	}
	Transition t0 	whenRequest coldroomdatarequest -> handle_data
					whenRequest storerequest		-> handle_store
					whenRequest insertticket		-> handle_ticket
					
	State handle_data {
		printCurrentMessage
		onMsg(coldroomdatarequest: coldroomdatarequest(_)) {
			replyTo coldroomdatarequest with coldroomdata: coldroomdata($CurrentWeight)
		}
	}
	Goto idle
	
	State handle_store {
		printCurrentMessage
		onMsg(storerequest: storerequest(FW)) {
			[#val FW = payloadArg(0).toFloat()#]
			if [#(CurrentWeight+ReservedWeight+FW>MaxWeightcoldroom)#]{
				[# RejectedRequests++ #]
				replyTo storerequest with storerejected: storerejected(_)
			}else{
				[#val TICKET = new Ticket(FW)
				  Tickets.add(TICKET)
				  ReservedWeight+=FW
				#]
				replyTo storerequest with storeaccepted: storeaccepted($TICKET)
			}
		}
	}
	Goto idle
	
	State handle_ticket {
		printCurrentMessage
		onMsg(insertticket: insertticket(TICKET)) {
			[#val TICKET = Tickets.find { it.timestamp == payloadArg(0).toString() }#]
			if [#(TICKET!=null && TICKET.isValid())#]{
				replyTo insertticket with ticketaccepted: ticketaccepted(_)
				[# CurrentTicket = TICKET #]
				forward transporttrolley -m gotoindoor: gotoindoor(_)
			}else{
				[# Tickets.remove(TICKET) 
				   ReservedWeight-=TICKET.getWeight()
				#]
				replyTo insertticket with ticketrejected: ticketrejected(_)
			}
		}
	}
	Goto idle
}

QActor sonar context ctxcoldstorage {
	State s0 initial {
		
	}
}

QActor led context ctxcoldstorage {
	State s0 initial {
		
	}
}