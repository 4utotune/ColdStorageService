System coldstorageservice_sprint2

// per observer
Dispatch 	coapUpdate			: 	coapUpdate(RESOURCE, VALUE)

// transport trolley -> coldstorageservice
Dispatch	chargetaken			: 	chargetaken(_)
Request 	chargedeposited		: 	chargedeposited(_)

// coldstorageservice -> transporttrolley_mock
Reply 		more				:	more(_)
Reply 		gohome				: 	gohome(_)
Dispatch 	gotoindoor			: 	gotoindoor(_)

// external <-> coldstorageservice:
Request 	storerequest		: 	storerequest(FW)
Reply		storeaccepted		:	storeaccepted(TICKET)
Reply		storerejected		: 	storerejected(REASON)

Request		insertticket		: 	insertticket(TICKET)
Reply		chargetaken			: 	chargetaken(_)
Reply		ticketrejected		: 	ticketrejected(REASON)


Context	ctx_coldstorage ip	[host="localhost" port=11802]


QActor coldstorageservice context ctx_coldstorage {
	[#	
		val MaxWeightDDR = 50.0f
		val MaxWeightcoldroom = 200.0f
		val TicketTimeout = 20000
		val TicketFormat = "yyyyMMddHHmmss"; // yyyy.MM.dd.HH.mm.ss
		
		var ticketManager = coldstorageservice.TicketManager(TicketTimeout, TicketFormat);
		
		var CurrentWeight = 0.0f
		var ReservedWeight = 0.0f
		var RejectedRequests = 0 
	#]
	State s0 initial {
		[# 
			ticketManager = coldstorageservice.TicketManager(TicketTimeout, TicketFormat);
			CurrentWeight = 0.0f 
			ReservedWeight = 0.0f
			RejectedRequests = 0
		#]
		println("$name | init") color green
	}
	Goto idle
	
	State idle {
		delay 100
		println("$name | Idle. Current: $CurrentWeight, Reserved: $ReservedWeight") color green
		updateResource [# "weight(cur,$CurrentWeight,res,$ReservedWeight,max,$MaxWeightcoldroom)" #]
	}
	Transition t0 whenRequest storerequest	-> handle_store
				  whenRequest insertticket	-> handle_ticket
				  whenRequest chargedeposited		-> handle_deposited
				  whenMsg	  chargetaken			-> handle_charge_taken
					
	State handle_store { 
		onMsg(storerequest: storerequest(FW)) {
			println("$name | Received store request for ${payloadArg(0)} kg") color green
		
			[# val FW = payloadArg(0).toFloat() #]
			
			if [# (FW > MaxWeightDDR) #] {
				[# RejectedRequests++ #]
				replyTo storerequest with storerejected: storerejected(tooheavy)
			} else {
				if [# ((CurrentWeight + ReservedWeight + FW) > MaxWeightcoldroom) #] {
					[# RejectedRequests++ #]
					replyTo storerequest with storerejected: storerejected(full)
				} else {
					[#
						val TICKET = ticketManager.newTicket(FW)
					  	ReservedWeight += FW
					  	val TicketId = TICKET.id
					#]
					println("$name | Store request accepted. Ticket: [ $TicketId ]") color green
					replyTo storerequest with storeaccepted: storeaccepted($TicketId)
				}	
			}
		}
	}
	Goto idle
	
	State handle_ticket {
		onMsg(insertticket: insertticket(TICKET)) {
			[# 
				val Received = payloadArg(0).toString()
				val TICKET = ticketManager.getTicket(Received)
			#]
			if [# (TICKET != null && TICKET.isValid) #]{
				if [# (ticketManager.isWaiting) #] {
					// reject ticket if one is already waiting
					replyTo insertticket with ticketrejected: ticketrejected(queuefull)
				} else {
					if [# (!ticketManager.isWorking) #] {
						println("$name | Approved ticket [ $Received ]. Requesting charge") color green
						forward transporttrolley_mock -m gotoindoor: gotoindoor(_)
					} else {
						println("$name | Approved ticket [ $Received ]. Currenty working on [ ${ticketManager.working} ]. Please wait") color green
					}
						
					[#  ticketManager.setWaiting(Received) #]
				}
			} else {
				if [#(TICKET != null)#] {
					[#
						ticketManager.remove(TICKET)
						ReservedWeight -= TICKET.weight
					#]
					println("$name | Rejected ticket [ $Received ]Â - timedout") color green
					replyTo insertticket with ticketrejected: ticketrejected(timedout)
				} else {
					println("$name | Rejected ticket [ $Received ] - doesn't exist") color green
					replyTo insertticket with ticketrejected: ticketrejected(invalid)	
				}				
			}
		}
	}
	Goto idle
	
	State handle_charge_taken {
		[# 			
			val TicketId = ticketManager.waitingNowWorking()
		#]
		println("$name | Charge taken for ticket [ $TicketId ]") color green
		replyTo insertticket with chargetaken: chargetaken(_)
	}
	Goto idle
	
	State handle_deposited {
		onMsg(chargedeposited: chargedeposited(_)) {
			[#
				if (ticketManager.isWorking) {
					CurrentWeight += ticketManager.workingTicket().weight
					ReservedWeight -= ticketManager.workingTicket().weight
				}
				ticketManager.stopWorking()
			#]
			println("$name | Deposit confirmation received") color green
			if [# (ticketManager.isWaiting) #] {
				println("$name | Next ticket: [ ${ticketManager.waiting} ]") color green
				replyTo chargedeposited with more: more(_)
			} else {
				replyTo chargedeposited with gohome: gohome(_)
			}
		}
	}
	Goto idle
}

QActor transporttrolley_mock context ctx_coldstorage {
	State s0 initial {
		println("$name | init") color magenta
	}
	Goto engaged
	
	State engaged {
		println("$name | basicrobot engaged") color magenta
	}
	Goto idle
	
	State idle{
		discardMsg On
	}
	Transition t0 whenMsg gotoindoor -> moveToIndoor
	
	State moveToIndoor {
		discardMsg On
		println("$name | vado all'INDOOR") color magenta
		delay 5000 // request moverobot (0,4)
	}
	Goto loadTheCharge
	
	State loadTheCharge{
		discardMsg On
		println("$name | sto caricando il carico presso l'INDOOR") color magenta
		delay 1000 // simulo azione di carico
		forward coldstorageservice -m chargetaken : chargetaken(_)
	}
	Goto movetocoldroom
	
	State movetocoldroom {
		discardMsg On
		println("$name | vado verso la cold room") color magenta
		delay 5000 // request moverobot (4,3) 
	}
	Goto storethecharge
	
	State storethecharge {
		discardMsg On
		println("$name | scarico il carico presso la Cold Room") color magenta
		delay 1000 // simulo azione di scarico
		request coldstorageservice -m chargedeposited : chargedeposited(_)
	}
	Transition t0 whenReply more -> moveToIndoor
				  whenReply gohome -> movetohome
	
	State movetohome{
		discardMsg On
		println("$name | vado alla posizione HOME") color magenta
		delay 5000 // request moverobot (0,0)
	}
	Goto trolleyathome
	
	State trolleyathome {
		discardMsg On
		println("$name | trolley at HOME") color magenta		
	}
	Goto idle
}