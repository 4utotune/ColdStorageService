/* Generated by AN DISI Unibo */ 
package it.unibo.gui_relay

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Gui_relay ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 val server = unibo.basicomm23.ws.WsConnection.create("localhost:8086/coldstoragesocket")  
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | Init")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | Waiting for a message... ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t0",targetState="handle_update",cond=whenDispatch("updatedata"))
					transition(edgeName="t1",targetState="handle_ticket",cond=whenDispatch("ticket"))
					transition(edgeName="t2",targetState="handle_error",cond=whenDispatch("error"))
					transition(edgeName="t3",targetState="handle_notify",cond=whenDispatch("notify"))
					transition(edgeName="t4",targetState="handle_storerequest",cond=whenDispatch("gui_storerequest"))
					transition(edgeName="t5",targetState="handle_insertticket",cond=whenDispatch("gui_insertticket"))
				}	 
				state("handle_update") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("updatedata(ARG)"), Term.createTerm("updatedata(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 server.forward("update-" + payloadArg(0))  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handle_ticket") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ticket(TICKET)"), Term.createTerm("ticket(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 server.forward("ticket-" + payloadArg(0))  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handle_error") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("error(REASON)"), Term.createTerm("error(RESON)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 server.forward("error-" + payloadArg(0))  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handle_notify") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("notify(ARG)"), Term.createTerm("notify(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 server.forward("notify-" + payloadArg(0))  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handle_storerequest") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("gui_storerequest(FW)"), Term.createTerm("gui_storerequest(FW)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outmagenta("Store request")
								forward("relay_storerequest", "relay_storerequest(${payloadArg(0)})" ,"accessgui_proxy" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handle_insertticket") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("gui_insertticket(TICKET)"), Term.createTerm("gui_insertticket(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outmagenta("Insert ticket")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
