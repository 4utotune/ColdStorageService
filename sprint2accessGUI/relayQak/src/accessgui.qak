System accessgui


// proxy -> relay -> gui
Dispatch updatedata	: updatedata(ARG)
Dispatch ticket		: ticket(TICKET)
Dispatch error		: error(REASON)
Dispatch notify		: notify(ARG)

// gui -> relay -> proxy
Dispatch gui_storerequest : gui_storerequest(FW)
Dispatch gui_insertticket : gui_insertticket(TICKET)

Dispatch relay_storerequest : relay_storerequest(FW)
Dispatch relay_insertticket : relay_insertticket(TICKET)


Context ctx_gui ip [host="localhost" port=8084]
Context ctx_coldstorage ip [host="127.0.0.1" port=11802]

ExternalQActor accessgui_proxy context ctx_coldstorage


QActor gui_relay context ctx_gui {
	[# val server = unibo.basicomm23.ws.WsConnection.create("localhost:8086/coldstoragesocket") #]
	
	State init initial {
		println("$name | Init") color magenta
	}
	Goto work
	
	State work {
		println("$name | Waiting for a message... ") color magenta
	}	
	Transition t 	whenMsg updatedata	-> handle_update
					whenMsg ticket		-> handle_ticket
					whenMsg error		-> handle_error
					whenMsg notify		-> handle_notify
					
					whenMsg gui_storerequest -> handle_storerequest
					whenMsg gui_insertticket -> handle_insertticket
	
	State handle_update {
		onMsg(updatedata : updatedata(ARG)) {
			[# server.forward("update-" + payloadArg(0)) #]
		}
	}
	Goto work
	
	State handle_ticket {
		onMsg(ticket : ticket(TICKET)) {
			[# server.forward("ticket-" + payloadArg(0)) #]
		}
	}
	Goto work
	
	State handle_error {
		onMsg(error	: error(RESON)) {
			[# server.forward("error-" + payloadArg(0)) #]
		}
	}
	Goto work
	
	State handle_notify {
		onMsg(notify : notify(ARG)) {
			[# server.forward("notify-" + payloadArg(0)) #]
		}
	}
	Goto work	
	
	State handle_storerequest {
		printCurrentMessage
		onMsg(gui_storerequest: gui_storerequest(FW)) {
			println("Store request") color magenta
			//updateResource [# "test" #]
			forward accessgui_proxy -m relay_storerequest : relay_storerequest($payloadArg(0))	
		}
		
	}
	Goto work
	
	State handle_insertticket {
		printCurrentMessage
		onMsg(gui_insertticket: gui_insertticket(TICKET)){
			println("Insert ticket") color magenta
			//emit relay_insertticket : relay_insertticket($payloadArg(0))
		}
	}
	Goto work	
}