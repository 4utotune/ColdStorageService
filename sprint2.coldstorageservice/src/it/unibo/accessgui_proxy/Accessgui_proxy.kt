/* Generated by AN DISI Unibo */ 
package it.unibo.accessgui_proxy

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Accessgui_proxy ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 val server = unibo.basicomm23.ws.WsConnection.create("localhost:8086/coldstoragesocket")  
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CoapObserverSupport(myself, "localhost","11802","ctx_coldstorage","coldstorageservice")
						CommUtils.outcyan("$name | Init")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="observing", cond=doswitch() )
				}	 
				state("observing") { //this:State
					action { //it:State
						CommUtils.outcyan("$name | Idle...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handle_storerequest",cond=whenDispatch("gui_storerequest"))
					transition(edgeName="t01",targetState="handle_insertticket",cond=whenDispatch("gui_insertticket"))
					transition(edgeName="t02",targetState="handle_update",cond=whenDispatch("coapUpdate"))
					transition(edgeName="t03",targetState="handle_charge_taken",cond=whenDispatch("chargetaken"))
				}	 
				state("handle_storerequest") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("gui_storerequest(FW)"), Term.createTerm("gui_storerequest(FW)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outcyan("$name | Sending store request")
								request("proxy_storerequest", "proxy_storerequest(${payloadArg(0)})" ,"coldstorageservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t4",targetState="handle_store_accepted",cond=whenReply("storeaccepted"))
					transition(edgeName="t5",targetState="handle_store_rejected",cond=whenReply("storerejected"))
				}	 
				state("handle_store_accepted") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("storeaccepted(TICKET)"), Term.createTerm("storeaccepted(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val TICKET = payloadArg(0)  
								CommUtils.outcyan("$name | Store Accepted. Received ticket [ $TICKET ]")
								 server.forward("ticket-" + payloadArg(0))  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="observing", cond=doswitch() )
				}	 
				state("handle_store_rejected") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("storerejected(_)"), Term.createTerm("storerejected(REASON)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 server.forward("error-storerejected: " + payloadArg(0))  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="observing", cond=doswitch() )
				}	 
				state("handle_insertticket") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("gui_insertticket(TICKET)"), Term.createTerm("gui_insertticket(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val TICKET = payloadArg(0)  
								request("proxy_insertticket", "proxy_insertticket($TICKET)" ,"coldstorageservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t6",targetState="handle_ticket_accepted",cond=whenReply("ticketaccepted"))
					transition(edgeName="t7",targetState="handle_ticket_rejected",cond=whenReply("ticketrejected"))
				}	 
				state("handle_ticket_accepted") { //this:State
					action { //it:State
						 server.forward("notify-" + payloadArg(0) + " accepted")  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="observing", cond=doswitch() )
				}	 
				state("handle_ticket_rejected") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ticketrejected(_)"), Term.createTerm("ticketrejected(REASON)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 server.forward("error-ticketrejected: " + payloadArg(0))  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="observing", cond=doswitch() )
				}	 
				state("handle_charge_taken") { //this:State
					action { //it:State
						 server.forward("notify-chargetaken")  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="observing", cond=doswitch() )
				}	 
				state("handle_update") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("coapUpdate(RESOURCE,VALUE)"), Term.createTerm("coapUpdate(RES,VAL)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val RES = payloadArg(0)  
								 val VAL = payloadArg(1)  
								if(  RES == "coldstorageservice"  
								 ){ server.forward("update-" + VAL)  
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="observing", cond=doswitch() )
				}	 
				state("handle_timeout") { //this:State
					action { //it:State
						CommUtils.outred("$name | An error occured")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="observing", cond=doswitch() )
				}	 
			}
		}
}
