/* Generated by AN DISI Unibo */ 
package it.unibo.warningdevice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Warningdevice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 
				var state = 0
				var stato1 = "0"
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outblue("$name | init")
						CoapObserverSupport(myself, "localhost","11802","ctx_coldstorage","transporttrolley")
						CommUtils.outblue("$name | LED IS OFF")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						CommUtils.outblue("$name | attendo update")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t014",targetState="doObserve",cond=whenDispatch("coapUpdate"))
				}	 
				state("doObserve") { //this:State
					action { //it:State
						discardMessages = false
						if( checkMsgContent( Term.createTerm("coapUpdate(RESOURCE,VALUE)"), Term.createTerm("coapUpdate(transporttrolley,ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var stato1 = payloadArg(1)  
								if(  (stato1 == "transporttrolley(OFF)")  
								 ){CommUtils.outblue("$name | led off | ricevuto dal TT")
								 state = 0  
								emit("ledoff", "ledoff(_)" ) 
								}
								else
								 {if(  (stato1 == "transporttrolley(ON)")  
								  ){CommUtils.outblue("$name | led ON | ricevuto dal TT")
								  state = 1  
								 emit("ledon", "ledon(_)" ) 
								 }
								 else
								  {if(  (stato1 == "transporttrolley(BLINK)")  
								   ){CommUtils.outblue("$name | led BLINK | ricevuto dal TT")
								   state = 2  
								  emit("ledblink", "ledblink(_)" ) 
								  }
								  else
								   {CommUtils.outblue("$name | $stato1 | sconosciuto | ricevuto dal TT")
								   }
								  }
								 }
						}
						if( checkMsgContent( Term.createTerm("coapUpdate(RESOURCE,VALUE)"), Term.createTerm("coapUpdate(alarmdevice,ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var stato2 = payloadArg(1)  
								if(  (stato2 == "ON")  
								 ){CommUtils.outblue("$name | led on | ricevuto dal sonar")
								 state = 1  
								}
								else
								 {CommUtils.outblue("$name | sconosciuto | ricevuto dal sonar")
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
