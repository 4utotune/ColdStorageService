/* Generated by AN DISI Unibo */ 
package it.unibo.accessguimock

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Accessguimock ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var currentWeight: Float = 0.0f	
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outcyan("$name | Init")
						 currentWeight = 0.0f  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t010",targetState="handle_mock_store_request",cond=whenDispatch("mock_store_request"))
					transition(edgeName="t011",targetState="handle_mock_ticket_input",cond=whenDispatch("mock_ticket_input"))
					transition(edgeName="t012",targetState="handle_charge_taken",cond=whenDispatch("chargetaken"))
				}	 
				state("handle_mock_store_request") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("mock_store_request(FW)"), Term.createTerm("mock_store_request(FW)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outcyan("$name | Sending store request")
								request("storerequest", "storerequest(${payloadArg(0)})" ,"coldstorageservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t13",targetState="handle_store_accepted",cond=whenReply("storeaccepted"))
					transition(edgeName="t14",targetState="handle_store_rejected",cond=whenReply("storerejected"))
				}	 
				state("handle_store_accepted") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("storeaccepted(TICKET)"), Term.createTerm("storeaccepted(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val TICKET = payloadArg(0)  
								CommUtils.outcyan("$name | Store Accepted. Received ticket [ $TICKET ]")
								forward("test_gotticket", "test_gotticket($TICKET)" ,"test_suite" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handle_store_rejected") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("storerejected(_)"), Term.createTerm("storerejected(REASON)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outcyan("$name | Store Rejected: ${payloadArg(0)}")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handle_mock_ticket_input") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("mock_ticket_input(TICKET)"), Term.createTerm("mock_ticket_input(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val TICKET = payloadArg(0)  
								CommUtils.outcyan("$name | Sending ticket [Â $TICKET ]")
								request("insertticket", "insertticket($TICKET)" ,"coldstorageservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t15",targetState="handle_ticket_accepted",cond=whenReply("ticketaccepted"))
					transition(edgeName="t16",targetState="handle_ticket_rejected",cond=whenReply("ticketrejected"))
				}	 
				state("handle_ticket_accepted") { //this:State
					action { //it:State
						CommUtils.outcyan("$name | Ticket Accepted")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handle_ticket_rejected") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ticketrejected(_)"), Term.createTerm("ticketrejected(REASON)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outcyan("$name | Ticket Rejected: ${payloadArg(0)}")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handle_charge_taken") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
