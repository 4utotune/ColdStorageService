/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var stato: String = ""  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | init e engage basicrobot")
						request("engage", "engage(transporttrolley,330)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="engaged",cond=whenReply("engagedone"))
					transition(edgeName="t08",targetState="quit",cond=whenReply("engagerefused"))
				}	 
				state("engaged") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | basicrobot engaged")
						updateResourceRep( "$name(HOME)" 
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						 stato = "inHome"  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="moveToIndoor",cond=whenDispatch("gotoindoor"))
					transition(edgeName="t010",targetState="sonarobstacle",cond=whenEvent("alarm"))
				}	 
				state("moveToIndoor") { //this:State
					action { //it:State
						 stato = "toIndoor"  
						updateResourceRep( "$name(MOVING)" 
						)
						CommUtils.outmagenta("$name | vado all'INDOOR")
						request("moverobot", "moverobot(0,4)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="loadTheCharge",cond=whenReply("moverobotdone"))
					transition(edgeName="t012",targetState="sonarobstacle",cond=whenEvent("alarm"))
				}	 
				state("loadTheCharge") { //this:State
					action { //it:State
						 stato = "inIndoor"  
						updateResourceRep( "$name(STOPPED)" 
						)
						CommUtils.outmagenta("$name | sono in INDOOR")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_loadTheCharge", 
				 	 					  scope, context!!, "local_tout_transporttrolley_loadTheCharge", 3000.toLong() )
					}	 	 
					 transition(edgeName="t13",targetState="moveToColdroom",cond=whenTimeout("local_tout_transporttrolley_loadTheCharge"))   
					transition(edgeName="t14",targetState="sonarobstacle",cond=whenEvent("alarm"))
				}	 
				state("moveToColdroom") { //this:State
					action { //it:State
						 stato = "toColdroom"  
						forward("chargetaken", "chargetaken(_)" ,"coldstorageservice" ) 
						CommUtils.outmagenta("$name | vado verso la cold room")
						updateResourceRep( "$name(MOVING)" 
						)
						request("moverobot", "moverobot(4,3)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t015",targetState="storeTheCharge",cond=whenReply("moverobotdone"))
					transition(edgeName="t016",targetState="sonarobstacle",cond=whenEvent("alarm"))
				}	 
				state("storeTheCharge") { //this:State
					action { //it:State
						 stato = "inColdroom"  
						updateResourceRep( "$name(STOPPED)" 
						)
						CommUtils.outmagenta("$name | sono in Cold Room")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_storeTheCharge", 
				 	 					  scope, context!!, "local_tout_transporttrolley_storeTheCharge", 3000.toLong() )
					}	 	 
					 transition(edgeName="t017",targetState="askService",cond=whenTimeout("local_tout_transporttrolley_storeTheCharge"))   
					transition(edgeName="t018",targetState="sonarobstacle",cond=whenEvent("alarm"))
				}	 
				state("askService") { //this:State
					action { //it:State
						request("chargedeposited", "chargedeposited(_)" ,"coldstorageservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t019",targetState="moveToIndoor",cond=whenReply("more"))
					transition(edgeName="t020",targetState="moveToHome",cond=whenReply("gohome"))
				}	 
				state("moveToHome") { //this:State
					action { //it:State
						 stato = "toHome"  
						updateResourceRep( "$name(MOVING)" 
						)
						CommUtils.outmagenta("$name | vado alla posizione HOME")
						request("moverobot", "moverobot(0,0)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t021",targetState="trolleyathome",cond=whenReply("moverobotdone"))
					transition(edgeName="t022",targetState="sonarobstacle",cond=whenEvent("alarm"))
				}	 
				state("trolleyathome") { //this:State
					action { //it:State
						updateResourceRep( "$name(HOME)" 
						)
						CommUtils.outmagenta("$name | trolley at HOME")
						forward("setdirection", "dir(down)" ,"basicrobot" ) 
						delay(500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("sonarobstacle") { //this:State
					action { //it:State
						discardMessages = true
						updateResourceRep( "$name(STOPPED)" 
						)
						CommUtils.outmagenta("$name | Sono fermo per ostacolo sonar")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t023",targetState="idle",cond=whenEventGuarded("resume",{ stato == "inHome"  
					}))
					transition(edgeName="t024",targetState="moveToIndoor",cond=whenEventGuarded("resume",{ stato == "toIndoor"  
					}))
					transition(edgeName="t025",targetState="moveToColdroom",cond=whenEventGuarded("resume",{ stato == "inIndoor"  
					}))
					transition(edgeName="t026",targetState="loadTheCharge",cond=whenEventGuarded("resume",{ stato == "toColdroom"  
					}))
					transition(edgeName="t027",targetState="storeTheCharge",cond=whenEventGuarded("resume",{ stato == "inColdroom"  
					}))
					transition(edgeName="t028",targetState="moveToHome",cond=whenEventGuarded("resume",{ stato == "toHome"  
					}))
				}	 
				state("quit") { //this:State
					action { //it:State
						forward("disengage", "disengage(transporttrolley)" ,"basicrobot" ) 
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
