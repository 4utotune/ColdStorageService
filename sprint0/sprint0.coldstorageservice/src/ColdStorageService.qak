System coldstorageservice_sprint0

// MESSAGGES

Event		accessguicmd		:	accessguicmd( CMD, ARG )	

// serviceAccessGUI -> coldstorageservice
Dispatch 	coldroomdata		: 	coldroomdata(WEIGHT)

Request 	storerequest		: 	storerequest(FW)
Reply		storeaccepted		:	storeaccepted(TICKET)
Reply		storerejected		: 	storerejected(_)

Request		insertticket		: 	insertticket(TICKET)
Reply		ticketaccepted		: 	ticketaccepted(_)
Reply		ticketrejected		: 	ticketrejected(_)

// transporttrolley -> coldstorageservice  
Dispatch	chargetaken			: 	chargetaken(_)
Request 	chargedeposited		: 	chargedeposited(_)

// coldstorageservice -> transporttrolley
Reply 		more				:	more(_)
Reply 		gohome				: 	gohome(_)
Dispatch 	gotoindoor			: 	gotoindoor(_)

// TransportTrolley -> BasicRobot
Dispatch	cmd					:	cmd(_)
Request 	step				:	step(_)

// transporttrolley -> led
Dispatch 	updateled			: 	updateled(STATUS) 

// transporttrolley / coldstorageservice -> servicestatusgui
Dispatch 	updatetrolleystatus	: 	updatetrolleystatus(STATE, POS)
Dispatch 	updatestoragestatus	: 	updatestoragestatus(CURWEIGHT, REJREQUESTS)


// CONTEXTS
Context ctx_basicrobot	ip [host="localhost" port=8020]
Context ctx_coldstorage	ip [host="localhost" port=11800]
//Context ctx_accessgui	ip [host="localhost" port=11801]
//Context ctx_statusgui	ip [host="localhost" port=11802]
//Context ctx_raspberry	ip [host="localhost" port=11803]


// ACTORS
ExternalQActor basicrobot context ctx_basicrobot


QActor serviceaccessgui context ctx_coldstorage { 
	[#
		var currentWeight: Float = 0.0f	
	#]
	State init initial {
		println("[ServiceAccessGui] Init") color cyan
		[# currentWeight = 0.0f #]
	}
	Goto waitevents
	
	State waitevents{}
	Transition t0 	whenEvent 	accessguicmd 	-> handleGuicmd
					whenMsg		coldroomdata 	-> handle_update_data	
					whenMsg		chargetaken 	-> handle_charge_taken	
	
	State handleGuicmd {
		discardMsg Off
	    onMsg ( accessguicmd : accessguicmd(store, FW)){
			println("[ServiceAccessGui] Sending store request") color cyan
			request coldstorageservice -m storerequest: storerequest($payloadArg(1))
		}
		onMsg ( accessguicmd : accessguicmd(ticket, TICKET)){
			println("[ServiceAccessGui] Sending ticket ") color cyan
			request coldstorageservice -m insertticket: insertticket($payloadArg(1))
		}
	} 
	Transition t1 	whenReply 	storeaccepted 	-> handle_store_accepted
					whenReply 	storerejected 	-> handle_store_rejected
					whenReply 	ticketaccepted 	-> handle_ticket_accepted
					whenReply 	ticketrejected 	-> handle_ticket_rejected
						
	
	State handle_update_data {
		onMsg(coldroomdata: coldroomdata(WEIGHT)) {
			[# 
				currentWeight = payloadArg(0).toFloat()	
			#]
			println("[ServiceAccessGui] Updating weight -> $currentWeight ") color cyan
		}
	}
	Goto waitevents
	
	State handle_store_accepted {
		onMsg(storeaccepted: storeaccepted(TICKET)) {
			[# val TIMESTAMP = payloadArg(0) #]
			println("[ServiceAccessGui] Store Accepted. Received ticket $TIMESTAMP") color cyan
		}
	}
	Goto waitevents
	
	State handle_store_rejected {
		println("[ServiceAccessGui] Store Rejected") color cyan
		// TODO show error message
	}
	Goto waitevents
		
	State handle_ticket_accepted {
		println("[ServiceAccessGui] Ticket Accepted") color cyan
		// TODO show success message
	}
	Goto waitevents
	
	State handle_ticket_rejected {
		println("[ServiceAccessGui] Ticket Rejected") color cyan
		// TODO show error message
	}
	Goto waitevents
	
	State handle_charge_taken {
		println("[ServiceAccessGui] Charge Taken") color cyan
		// TODO show charge taken message
	}
	Goto waitevents
}


QActor coldstorageservice context ctx_coldstorage {
	[#	
		var MaxWeightcoldroom: Float = 100.0f
		var CurrentWeight: Float = 0.0f
		var RejectedRequests: Int = 0
		var WorkingTicket: coldstorageservice.Ticket? = null
		var Tickets: MutableSet<coldstorageservice.Ticket> = mutableSetOf()
	#]
	State init initial {
		[# 
			MaxWeightcoldroom = 100f
			CurrentWeight = 0.0f 
			RejectedRequests = 0
			WorkingTicket = null
			Tickets = mutableSetOf()
		#]
		println("[ColdStorageService] Init") color green		
		forward servicestatusgui -m updatestoragestatus: updatestoragestatus($CurrentWeight, $RejectedRequests)
	}
	Goto idle
	
	State idle {
		println("[ColdStorageService] Idle...") color green
	}
	Transition t0 	whenRequest storerequest		-> handle_store
					whenRequest insertticket		-> handle_ticket
					whenRequest chargedeposited		-> handle_ticketloop
					whenMsg		chargetaken			-> handle_charge_taken
					
	State handle_store {
		onMsg(storerequest: storerequest(FW)) {
			println("[ColdStorageService] Received store request for ${payloadArg(0)} kg") color green
			[# val FW = payloadArg(0).toFloat() #]
			if [# ((CurrentWeight + FW) > MaxWeightcoldroom) #] {
				[# RejectedRequests++ #]
				replyTo storerequest with storerejected: storerejected(_)
			} else {
				[#
					val TICKET = coldstorageservice.Ticket(FW)
				  	Tickets.add(TICKET)
				  	val Timestamp = TICKET.getTimestamp()
				#]
				replyTo storerequest with storeaccepted: storeaccepted($Timestamp)
			}
		}
	}
	Goto idle
	
	State handle_ticket {
		onMsg(insertticket: insertticket(TICKET)) {
			[# 
				val Received = payloadArg(0).toString()
				val TICKET = Tickets.find { it.getTimestamp() == Received }
			#]
			println("[ColdStorageService] Handling ticket $Received") color green
			if [# (TICKET != null && TICKET.isValid) #]{
				[# 
					WorkingTicket = TICKET 				
				#]
				replyTo insertticket with ticketaccepted: ticketaccepted(_)
				forward transporttrolley -m gotoindoor: gotoindoor(_)
			} else {
				[# 
					if (TICKET != null) {
						Tickets.remove(TICKET) 
				   	}
				#]
				replyTo insertticket with ticketrejected: ticketrejected(_)
			}
		}
	}
	Goto idle
	
	State handle_ticketloop {
		onMsg(chargedeposited: chargedeposited(_)) {
			println("[ColdStorageService] Deposit confirmation received") color green
			[#
				if (WorkingTicket!=null){
					CurrentWeight += WorkingTicket!!.getWeight()
				}	
				WorkingTicket = null
			#]
			println("[ColdStorageService] Sending current weight update") color green
			forward serviceaccessgui -m coldroomdata: coldroomdata($CurrentWeight)
			forward servicestatusgui -m updatestoragestatus: updatestoragestatus($CurrentWeight, $RejectedRequests)
			
			replyTo chargedeposited with gohome: gohome(_)	
		}
	}
	Goto idle
	
	State handle_charge_taken {
		[# 
			val Timestamp = WorkingTicket!!.getTimestamp()
		#]
		println("[ColdStorageService] Forwarding charge taken for ticket $Timestamp") color green
		forward serviceaccessgui -m chargetaken: chargetaken(_)
	}
	Goto idle
}


QActor transporttrolley context ctx_coldstorage {
	State init initial {
		println("[TransportTrolley] Init") color magenta
		forward servicestatusgui -m updatetrolleystatus: updatetrolleystatus(_) 
	}
	Goto idle
	
	State idle {
		println("[transporttrolley] Idle...") color magenta
	}
	Transition t0	whenMsg gotoindoor	-> handle_load_request
	
	State handle_load_request {
		onMsg(gotoindoor: gotoindoor(_)) {
			println("[transporttrolley] Going indoor") color magenta
			forward led -m updateled: updateled(_)
			forward basicrobot -m cmd: cmd(_)
			request basicrobot -m step: step(_)
			delay 500
			// TODO
			// go to indoor
			// pick up
			println("[transporttrolley] Charge taken") color magenta
			forward coldstorageservice -m chargetaken: chargetaken(_)
			delay 500
			// TODO
			// go to coldroom
			println("[transporttrolley] Charge deposited") color magenta
			request coldstorageservice -m chargedeposited: chargedeposited(_)
		}
	}
	Transition t1	whenReply more -> handle_load_request
				 	whenReply gohome -> handle_gohome
				 	
	State handle_gohome {
		onMsg(gohome: gohome(_)) {
			println("[transporttrolley] Going home") color magenta
			// TODO 
			// go to home
		}
	}
	Goto idle
}


QActor sonar context ctx_coldstorage { //ctx_raspberry {
	State init initial {
		println("[Sonar] Init") color blue
	}
	Goto idle
	
	State idle {
		println("[Sonar] Idle...") color blue
		// TODO
	}

	State alarm {

	}
	Goto idle
}


QActor led context ctx_coldstorage { //ctx_raspberry {
	State init initial {
		println("[Led] Init") color blue
	}
	Goto led_off
	
	State led_off {
		
	}
	Transition t0	whenMsg updateled	-> handle_update
	
	State led_on {
		
	}
	Transition t1	whenMsg updateled	-> handle_update
	
	State led_blink {
		
	}
	Transition t2	whenMsg updateled	-> handle_update
	
	State handle_update {
		onMsg(updateled: updateled(STATUS)) {
			println("[Led] Updating led")
			// TODO
			// update led
			// do the actual transition		
		}
	}
	Goto led_off
}


QActor servicestatusgui context ctx_coldstorage { //ctx_statusgui {
	[# 
		var TrolleyState: String = "IDLE"
		var TrolleyPosition: String = "HOME"
		var CurrentWeight: Float = 0.0f
		var RejectedRequests: Int = 0
	#]
	State init initial {
		println("[ServiceStatusGui] Init") color red
		[# 
			TrolleyState = "IDLE"
			TrolleyPosition = "HOME"
			CurrentWeight = 0.0f
			RejectedRequests = 0
		#]	
	}
	Goto idle
	
	State idle {
	}
	Transition t0	whenMsg updatetrolleystatus 	-> handle_trolley_update
					whenMsg updatestoragestatus -> handle_coldstorage_update
					
	State handle_trolley_update {
		onMsg(updatetrolleystatus: updatetrolleystatus(STATE, POS)) {
			[#
				TrolleyState = payloadArg(0)
				TrolleyPosition = payloadArg(1)
			#]
		}
		println("[ServiceStatusGui] Updated trolley -> State: $TrolleyState, Pos: $TrolleyPosition") color red
	}
	Goto idle
	
	State handle_coldstorage_update {
		onMsg(updatestoragestatus: updatestoragestatus(CURWEIGHT, REJREQUESTS)) {
			[#
				CurrentWeight = payloadArg(0).toFloat()
				RejectedRequests = payloadArg(1).toInt()
			#]
		}
		println("[ServiceStatusGui] Updated coldroom -> CurWeight: $CurrentWeight, RejRequests: $RejectedRequests") color red
	}
	Goto idle
}