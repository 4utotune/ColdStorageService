/* Generated by AN DISI Unibo */ 
package it.unibo.coldstorageservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Coldstorageservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
			
				var MaxWeightcoldroom: Float = 100.0f
				var CurrentWeight: Float = 0.0f
				var RejectedRequests: Int = 0
				var WorkingTicket: coldstorageservice.Ticket? = null
				var Tickets: MutableSet<coldstorageservice.Ticket> = mutableSetOf()
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						 
									MaxWeightcoldroom = 100f
									CurrentWeight = 0.0f 
									RejectedRequests = 0
									WorkingTicket = null
									Tickets = mutableSetOf()
						CommUtils.outgreen("[ColdStorageService] Init")
						forward("updatestoragestatus", "updatestoragestatus($CurrentWeight,$RejectedRequests)" ,"servicestatusgui" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outgreen("[ColdStorageService] Idle...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="handle_store",cond=whenRequest("storerequest"))
					transition(edgeName="t08",targetState="handle_ticket",cond=whenRequest("insertticket"))
					transition(edgeName="t09",targetState="handle_ticketloop",cond=whenRequest("chargedeposited"))
					transition(edgeName="t010",targetState="handle_charge_taken",cond=whenDispatch("chargetaken"))
				}	 
				state("handle_store") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("storerequest(FW)"), Term.createTerm("storerequest(FW)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outgreen("[ColdStorageService] Received store request for ${payloadArg(0)} kg")
								 val FW = payloadArg(0).toFloat()  
								if(  ((CurrentWeight + FW) > MaxWeightcoldroom)  
								 ){ RejectedRequests++  
								answer("storerequest", "storerejected", "storerejected(_)"   )  
								}
								else
								 {
								 					val TICKET = coldstorageservice.Ticket(FW)
								 				  	Tickets.add(TICKET)
								 				  	val Timestamp = TICKET.getTimestamp()
								 answer("storerequest", "storeaccepted", "storeaccepted($Timestamp)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handle_ticket") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("insertticket(TICKET)"), Term.createTerm("insertticket(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val Received = payloadArg(0).toString()
												val TICKET = Tickets.find { it.getTimestamp() == Received }
								CommUtils.outgreen("[ColdStorageService] Handling ticket $Received")
								if(  (TICKET != null && TICKET.isValid)  
								 ){ 
													WorkingTicket = TICKET 				
								answer("insertticket", "ticketaccepted", "ticketaccepted(_)"   )  
								forward("gotoindoor", "gotoindoor(_)" ,"transporttrolley" ) 
								}
								else
								 { 
								 					if (TICKET != null) {
								 						Tickets.remove(TICKET) 
								 				   	}
								 answer("insertticket", "ticketrejected", "ticketrejected(_)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handle_ticketloop") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("chargedeposited(_)"), Term.createTerm("chargedeposited(_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outgreen("[ColdStorageService] Deposit confirmation received")
								
												if (WorkingTicket!=null){
													CurrentWeight += WorkingTicket!!.getWeight()
												}	
												WorkingTicket = null
								CommUtils.outgreen("[ColdStorageService] Sending current weight update")
								forward("coldroomdata", "coldroomdata($CurrentWeight)" ,"serviceaccessgui" ) 
								forward("updatestoragestatus", "updatestoragestatus($CurrentWeight,$RejectedRequests)" ,"servicestatusgui" ) 
								answer("chargedeposited", "gohome", "gohome(_)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handle_charge_taken") { //this:State
					action { //it:State
						 
									val Timestamp = WorkingTicket!!.getTimestamp()
						CommUtils.outgreen("[ColdStorageService] Forwarding charge taken for ticket $Timestamp")
						forward("chargetaken", "chargetaken(_)" ,"serviceaccessgui" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
