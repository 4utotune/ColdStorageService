/* Generated by AN DISI Unibo */ 
package it.unibo.test_suite

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Test_suite ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var Current: Int = 1  
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | Init")
						delay(2000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="test1", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						 Current++  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t0",targetState="test1",cond=whenDispatchGuarded("next_test",{ Current == 1  
					}))
					transition(edgeName="t1",targetState="test2",cond=whenDispatchGuarded("next_test",{ Current == 2  
					}))
					transition(edgeName="t2",targetState="test3",cond=whenDispatchGuarded("next_test",{ Current == 3  
					}))
					transition(edgeName="t3",targetState="test4",cond=whenDispatchGuarded("next_test",{ Current == 4  
					}))
					transition(edgeName="t4",targetState="test5",cond=whenDispatchGuarded("next_test",{ Current == 5  
					}))
					transition(edgeName="t5",targetState="test6",cond=whenDispatchGuarded("next_test",{ Current == 6  
					}))
					transition(edgeName="t6",targetState="reset",cond=whenDispatch("next_test"))
				}	 
				state("reset") { //this:State
					action { //it:State
						 Current = 0  
						CommUtils.outyellow("$name | New test loop")
						forward("next_test", "next_test(_)" ,"test_suite" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("test1") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | Test 1 - normal request")
						forward("mock_store_request", "mock_store_request(30)" ,"accessguimock" ) 
						delay(2000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="test1_b",cond=whenDispatch("test_gotticket"))
				}	 
				state("test1_b") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("test_gotticket(TICKET)"), Term.createTerm("test_gotticket(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val Ticket = payloadArg(0)  
								forward("mock_ticket_input", "mock_ticket_input($Ticket)" ,"accessguimock" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("test2") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | Test 2 - Request while Service is serving another Truck")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="test2_a", cond=doswitch() )
				}	 
				state("test2_a") { //this:State
					action { //it:State
						forward("mock_store_request", "mock_store_request(10)" ,"accessguimock" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="firstticket8",targetState="test2_b",cond=whenDispatch("test_gotticket"))
				}	 
				state("test2_b") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("test_gotticket(TICKET)"), Term.createTerm("test_gotticket(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("mock_ticket_input", "mock_ticket_input(${payloadArg(0)})" ,"accessguimock" ) 
								delay(500) 
								forward("mock_store_request", "mock_store_request(10)" ,"accessguimock" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="secondticket9",targetState="test2_c",cond=whenDispatch("test_gotticket"))
				}	 
				state("test2_c") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("test_gotticket(TICKET)"), Term.createTerm("test_gotticket(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								delay(5000) 
								forward("mock_ticket_input", "mock_ticket_input(${payloadArg(0)})" ,"accessguimock" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("test3") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | Test 3 - Inputing non-existent ticket (should fail)")
						forward("mock_ticket_input", "mock_ticket_input(abcdefghi)" ,"accessguimock" ) 
						delay(2000) 
						forward("next_test", "next_test(_)" ,"test_suite" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("test4") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | Test 4 - Requesting too big of a store (should fail)")
						forward("mock_store_request", "mock_store_request(1000)" ,"accessguimock" ) 
						delay(2000) 
						forward("next_test", "next_test(_)" ,"test_suite" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("test5") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | Test 5 - Inputing ticket too late (should fail)")
						forward("mock_store_request", "mock_store_request(30)" ,"accessguimock" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t110",targetState="test5_b",cond=whenDispatch("test_gotticket"))
				}	 
				state("test5_b") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("test_gotticket(TICKET)"), Term.createTerm("test_gotticket(TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								delay(20000) 
								forward("mock_ticket_input", "mock_ticket_input(${payloadArg(0)})" ,"accessguimock" ) 
								delay(2000) 
								forward("next_test", "next_test(_)" ,"test_suite" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("test6") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | Test 6 - Requesting store exceeding DDR capacity")
						forward("mock_store_request", "mock_store_request(60)" ,"accessguimock" ) 
						delay(2000) 
						forward("next_test", "next_test(_)" ,"test_suite" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
